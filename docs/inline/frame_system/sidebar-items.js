initSidebarItems({"enum":[["DecRefError","Some resultant status relevant to decrementing a provider reference."],["DecRefStatus","Some resultant status relevant to decrementing a provider reference."],["IncRefError","Some resultant status relevant to incrementing a provider reference."],["IncRefStatus","Some resultant status relevant to incrementing a provider reference."],["InitKind","A type of block initialization to perform."],["Phase","A phase of a block’s execution."],["RawOrigin","Origin for the System pallet."],["RefStatus","Reference status; can be either referenced or unreferenced."]],"fn":[["ensure_none","Ensure that the origin `o` represents an unsigned extrinsic. Returns `Ok` or an `Err` otherwise."],["ensure_root","Ensure that the origin `o` represents the root. Returns `Ok` or an `Err` otherwise."],["ensure_signed","Ensure that the origin `o` represents a signed extrinsic (i.e. transaction). Returns `Ok` with the account that signed the extrinsic or an `Err` otherwise."],["extrinsics_data_root","Compute the trie root of a list of extrinsics."],["extrinsics_root","Compute the trie root of a list of extrinsics."],["split_inner","Split an `option` into two constituent options, as defined by a `splitter` function."]],"mod":[["limits","Block resource limits configuration structures."],["mocking","Provide types to help defining a mock environment when testing pallets."],["offchain","Module helpers for off-chain calls."],["pallet",""],["pallet_prelude","Prelude to be used alongside pallet macro, for ease of use."],["weights","Weights for frame_system THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0 DATE: 2020-10-28, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: [] EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some(“dev”), DB CACHE: 128"]],"struct":[["AccountInfo","Information of an account."],["ChainContext",""],["CheckEra","Check for transaction mortality."],["CheckGenesis","Genesis hash check to provide replay protection between different networks."],["CheckMortality","Check for transaction mortality."],["CheckNonce","Nonce check and increment to give replay protection for transactions."],["CheckSpecVersion","Ensure the runtime version registered in the transaction is the same as at present."],["CheckTxVersion","Ensure the transaction version registered in the transaction is the same as at present."],["CheckWeight","Block resource (weight) limit check."],["Consumer","Event handler which registers a consumer when created."],["EnsureNever",""],["EnsureNone",""],["EnsureOneOf","The “OR gate” implementation of `EnsureOrigin`."],["EnsureRoot",""],["EnsureSigned",""],["EnsureSignedBy",""],["EventRecord","Record of an event happening."],["LastRuntimeUpgradeInfo","Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."],["Provider","Event handler which registers a provider when created."]],"type":[["ConsumedWeight","An object to track the currently used extrinsic weight in a block."],["DigestItemOf",""],["DigestOf",""],["Key",""],["KeyValue",""],["RefCount","Type used to encode the number of references an account has."]]});