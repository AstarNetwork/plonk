initSidebarItems({"enum":[["TransactionOutcome","Describes on what should happen with a storage transaction."]],"fn":[["require_transaction","Assert this method is called within a storage transaction. This will panic if is not called within a storage transaction."],["with_transaction","Execute the supplied function in a new storage transaction."]],"mod":[["child","Operation on runtime child storages."],["hashed","Operation on runtime storage using hashed keys."],["migration","Some utilities for helping access storage with arbitrary key types."],["types","Storage types to build abstraction on storage, they implements storage traits such as StorageMap and others."],["unhashed","Operation on unhashed runtime storage."]],"struct":[["PrefixIterator","Iterate over a prefix and decode raw_key and raw_value into `T`."]],"trait":[["IterableStorageDoubleMap","A strongly-typed double map in storage whose secondary keys and values can be iterated over."],["IterableStorageMap","A strongly-typed map in storage whose keys and values can be iterated over."],["StorageAppend","Marker trait that will be implemented for types that support the `storage::append` api."],["StorageDecodeLength","Marker trait that will be implemented for types that support to decode their length in an effificent way. It is expected that the length is at the beginning of the encoded object and that the length is a `Compact<u32>`."],["StorageDoubleMap","An implementation of a map with a two keys."],["StorageMap","A strongly-typed map in storage."],["StoragePrefixedMap","Trait for maps that store all its value after a unique prefix."],["StorageValue","A trait for working with macro-generated storage values under the substrate storage API."]]});