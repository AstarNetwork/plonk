initSidebarItems({"derive":[["CloneNoBound","Derive [`Clone`] but do not bound any generic. Docs are at `frame_support::CloneNoBound`."],["DebugNoBound","Derive [`Debug`] but do not bound any generics. Docs are at `frame_support::DeriveNoBounds`."],["Decode","Derive `parity_scale_codec::Decode` and for struct and enum."],["Encode","Derive `parity_scale_codec::Encode` and `parity_scale_codec::EncodeLike` for struct and enum."],["EqNoBound","derive Eq but do no bound any generic. Docs are at `frame_support::EqNoBound`."],["PartialEqNoBound","Derive [`PartialEq`] but do not bound any generic. Docs are at `frame_support::PartialEqNoBound`."],["RuntimeDebug",""],["RuntimeDebugNoBound","Derive [`Debug`], if `std` is enabled it uses `frame_support::DebugNoBound`, if `std` is not enabled it just returns `\"<stripped>\"`. This behaviour is useful to prevent bloating the runtime WASM blob from unneeded code."]],"enum":[["DispatchError","Reason why a dispatch call failed."],["InvalidTransaction","An invalid transaction validity."],["TransactionSource","The source of the transaction."],["TransactionValidityError","Errors that can occur while checking the validity of a transaction."],["UnknownTransaction","An unknown transaction validity."]],"struct":[["Blake2_128","Hash storage keys with blake2 128"],["Blake2_128Concat","Hash storage keys with `concat(blake2_128(key), key)`"],["Blake2_256","Hash storage keys with blake2 256"],["Identity","Store the key directly."],["InherentData","Inherent data to include in a block."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["StorageDoubleMap","A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow to iterate and remove value associated to first key."],["StorageMap","A type that allow to store value for given key. Allowing to insert/remove/iterate on values."],["StorageValue","A type that allow to store a value."],["Twox128","Hash storage keys with twox 128"],["Twox256","Hash storage keys with twox 256"],["Twox64Concat","Hash storage keys with `concat(twox64(key), key)`"],["ValidTransaction","Information concerning a valid transaction."]],"trait":[["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["MaybeSerializeDeserialize","A type that implements Serialize, DeserializeOwned and Debug when in std environment."],["Member","A type that can be used in runtime structures."],["ProvideInherent","A pallet that provides or verifies an inherent extrinsic."],["ValidateUnsigned","Something that can validate unsigned extrinsics for the transaction pool."]],"type":[["InherentIdentifier","An identifier for an inherent."],["TransactionLongevity","Minimum number of blocks a transaction will remain valid for. `TransactionLongevity::max_value()` means “forever”."],["TransactionPriority","Priority for a transaction. Additive. Higher is better."],["TransactionTag","Tag for a transaction. No two transactions with the same tag should be placed on-chain."],["TransactionValidity","Information on a transaction’s validity and, if valid, on how it relates to other transactions."]]});